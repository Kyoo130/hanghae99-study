{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\nimport { setCookie, getCookie, deleteCookie } from \"../../shared/Cookie\"; // actions\n\nconst LOG_IN = \"LOG_IN\";\nconst LOG_OUT = \"LOG_OUT\";\nconst GET_USER = \"GET_USER\"; //action creators\n\nconst logIn = createAction(LOG_IN, user => ({\n  user\n}));\nconst logOut = createAction(LOG_OUT, user => ({\n  user\n}));\nconst getUser = createAction(GET_USER, user => ({\n  user\n})); // initialState\n\nconst initialState = {\n  user: null,\n  is_login: false\n}; // middleware actions\n\nconst loginAction = user => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    console.log(history);\n    dispatch(logIn(user));\n    history.push('/');\n  };\n}; // reducer\n\n\nexport default handleActions({\n  [LOG_IN]: (state, action) => produce(state, draft => {\n    setCookie(\"is_login\", \"success\");\n    draft.user = action.payload.user;\n    draft.is_login = true;\n  }),\n  [LOG_OUT]: (state, action) => produce(state, draft => {}),\n  [GET_USER]: (state, action) => produce(state, draft => {})\n}, initialState); // action creator expot\n\nconst actionCreators = {\n  logIn,\n  logOut,\n  getUser,\n  loginAction\n};\nexport { actionCreators };","map":{"version":3,"sources":["/Users/kyoomac/MyDocument/GitHub/Kyoo99/02_week_deep/image-community/src/redux/modules/user.js"],"names":["createAction","handleActions","produce","setCookie","getCookie","deleteCookie","LOG_IN","LOG_OUT","GET_USER","logIn","user","logOut","getUser","initialState","is_login","loginAction","dispatch","getState","history","console","log","push","state","action","draft","payload","actionCreators"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,SAASC,OAAT,QAAwB,OAAxB;AAEA,SAASC,SAAT,EAAoBC,SAApB,EAA+BC,YAA/B,QAAmD,qBAAnD,C,CAGA;;AACA,MAAMC,MAAM,GAAG,QAAf;AACA,MAAMC,OAAO,GAAG,SAAhB;AACA,MAAMC,QAAQ,GAAG,UAAjB,C,CAGA;;AACA,MAAMC,KAAK,GAAGT,YAAY,CAACM,MAAD,EAAUI,IAAD,KAAW;AAAEA,EAAAA;AAAF,CAAX,CAAT,CAA1B;AACA,MAAMC,MAAM,GAAGX,YAAY,CAACO,OAAD,EAAWG,IAAD,KAAW;AAAEA,EAAAA;AAAF,CAAX,CAAV,CAA3B;AACA,MAAME,OAAO,GAAGZ,YAAY,CAACQ,QAAD,EAAYE,IAAD,KAAW;AAAEA,EAAAA;AAAF,CAAX,CAAX,CAA5B,C,CAGA;;AACA,MAAMG,YAAY,GAAG;AACjBH,EAAAA,IAAI,EAAE,IADW;AAEjBI,EAAAA,QAAQ,EAAE;AAFO,CAArB,C,CAKA;;AACA,MAAMC,WAAW,GAAIL,IAAD,IAAU;AAC1B,SAAO,UAAUM,QAAV,EAAoBC,QAApB,EAA8B;AAAEC,IAAAA;AAAF,GAA9B,EAA2C;AAC9CC,IAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACAF,IAAAA,QAAQ,CAACP,KAAK,CAACC,IAAD,CAAN,CAAR;AACAQ,IAAAA,OAAO,CAACG,IAAR,CAAa,GAAb;AACH,GAJD;AAKH,CAND,C,CASA;;;AACA,eAAepB,aAAa,CAAC;AACzB,GAACK,MAAD,GAAU,CAACgB,KAAD,EAAQC,MAAR,KAAmBrB,OAAO,CAACoB,KAAD,EAASE,KAAD,IAAW;AACnDrB,IAAAA,SAAS,CAAC,UAAD,EAAa,SAAb,CAAT;AACAqB,IAAAA,KAAK,CAACd,IAAN,GAAaa,MAAM,CAACE,OAAP,CAAef,IAA5B;AACAc,IAAAA,KAAK,CAACV,QAAN,GAAiB,IAAjB;AACH,GAJmC,CADX;AAMzB,GAACP,OAAD,GAAW,CAACe,KAAD,EAAQC,MAAR,KAAmBrB,OAAO,CAACoB,KAAD,EAASE,KAAD,IAAW,CAAG,CAAtB,CANZ;AAOzB,GAAChB,QAAD,GAAY,CAACc,KAAD,EAAQC,MAAR,KAAmBrB,OAAO,CAACoB,KAAD,EAASE,KAAD,IAAW,CAAG,CAAtB;AAPb,CAAD,EASxBX,YATwB,CAA5B,C,CAaA;;AACA,MAAMa,cAAc,GAAG;AACnBjB,EAAAA,KADmB;AAEnBE,EAAAA,MAFmB;AAGnBC,EAAAA,OAHmB;AAInBG,EAAAA;AAJmB,CAAvB;AAOA,SAASW,cAAT","sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\n\nimport { setCookie, getCookie, deleteCookie } from \"../../shared/Cookie\";\n\n\n// actions\nconst LOG_IN = \"LOG_IN\";\nconst LOG_OUT = \"LOG_OUT\";\nconst GET_USER = \"GET_USER\";\n\n\n//action creators\nconst logIn = createAction(LOG_IN, (user) => ({ user }));\nconst logOut = createAction(LOG_OUT, (user) => ({ user }));\nconst getUser = createAction(GET_USER, (user) => ({ user }));\n\n\n// initialState\nconst initialState = {\n    user: null,\n    is_login: false,\n}\n\n// middleware actions\nconst loginAction = (user) => {\n    return function (dispatch, getState, { history }) {\n        console.log(history);\n        dispatch(logIn(user));\n        history.push('/');\n    }\n}\n\n\n// reducer\nexport default handleActions({\n    [LOG_IN]: (state, action) => produce(state, (draft) => {\n        setCookie(\"is_login\", \"success\")\n        draft.user = action.payload.user;\n        draft.is_login = true;\n    }),\n    [LOG_OUT]: (state, action) => produce(state, (draft) => { }),\n    [GET_USER]: (state, action) => produce(state, (draft) => { }),\n},\n    initialState\n);\n\n\n// action creator expot\nconst actionCreators = {\n    logIn,\n    logOut,\n    getUser,\n    loginAction,\n};\n\nexport { actionCreators };"]},"metadata":{},"sourceType":"module"}